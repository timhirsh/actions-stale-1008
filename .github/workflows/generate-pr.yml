name: Generate Maximum PRs

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of PRs to generate (1-50)'
        required: true
        default: '10'
        type: string
  
  schedule:
    # Run every 4 hours to maximize PR generation while respecting API limits
    - cron: '0 */4 * * *'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  generate-prs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        batch: [1, 2, 3, 4, 5] # Generate 5 parallel jobs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "pr-generator-bot[bot]"
          git config --global user.email "pr-generator-bot[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          # Install UUID generator and other tools
          sudo apt-get update
          sudo apt-get install -y uuid-runtime jq

      - name: Set batch configuration
        id: config
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "batch_size=5" >> $GITHUB_OUTPUT
          else
            echo "batch_size=${{ github.event.inputs.batch_size }}" >> $GITHUB_OUTPUT
          fi
          
          # Generate unique identifier for this batch
          batch_id="batch-${{ matrix.batch }}-$(date +%Y%m%d-%H%M%S)-$(uuidgen | cut -d'-' -f1)"
          echo "batch_id=$batch_id" >> $GITHUB_OUTPUT

      - name: Create multiple PRs in batch
        run: |
          batch_size=${{ steps.config.outputs.batch_size }}
          batch_id="${{ steps.config.outputs.batch_id }}"
          
          # Lorem ipsum generator function (hardcoded to medium length)
          generate_lorem() {
            words=200
            
            lorem_base="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem."
            
            # Repeat and format text
            repeated_text=""
            for i in $(seq 1 $((words / 50 + 1))); do
              repeated_text="$repeated_text $lorem_base"
            done
            
            echo "$repeated_text" | head -c $((words * 6)) | sed 's/[[:space:]]*$//'
          }
          
          # Generate txt file content
          generate_content() {
            local uuid=$1
            local timestamp=$2
            
            echo "Generated content - ID: $uuid"
            echo "Timestamp: $timestamp"
            echo "Batch: $batch_id"
            echo "Content Length: medium"
            echo ""
            generate_lorem
          }
          
          echo "🚀 Starting batch generation of $batch_size PRs (Matrix job ${{ matrix.batch }})"
          
          for i in $(seq 1 $batch_size); do
            echo "📝 Creating PR $i of $batch_size..."
            
            # Generate unique identifiers
            file_uuid=$(uuidgen)
            branch_uuid=$(uuidgen | cut -d'-' -f1)
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
            # Create file path (no subdirectories)
            file_path="generated-${file_uuid}.txt"
            
            # Create unique branch
            branch_name="auto-gen-${batch_id}-${branch_uuid}"
            
            # Check for API rate limits before making requests
            remaining=$(gh api rate_limit --jq '.rate.remaining' 2>/dev/null || echo "unknown")
            if [ "$remaining" != "unknown" ] && [ "$remaining" -lt 100 ]; then
              echo "⚠️ API rate limit low ($remaining remaining). Implementing delay..."
              sleep 30
            fi
            
            # Create and switch to new branch
            git checkout main
            git checkout -b "$branch_name"
            
            # Generate and write content
            generate_content "$file_uuid" "$timestamp" > "$file_path"
            
            # Commit changes
            git add "$file_path"
            git commit -m "Add generated txt file: $file_path
          
          - UUID: $file_uuid
          - Batch: $batch_id
          - Generated: $timestamp"
            
            # Push branch
            git push origin "$branch_name"
            
            # Create PR with exponential backoff
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              pr_result=$(gh pr create \
                --title "🤖 Generated: txt file ${file_uuid}" \
                --body "Workflow Run**: [\`${{ github.run_id }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
                --head "$branch_name" \
                --base main 2>&1)
              
              if echo "$pr_result" | grep -q "https://github.com"; then
                echo "✅ PR created successfully: $pr_result"
                break
              else
                retry_count=$((retry_count + 1))
                wait_time=$((2 ** retry_count))
                echo "⚠️ PR creation failed (attempt $retry_count/$max_retries). Waiting ${wait_time}s..."
                sleep $wait_time
                
                if [ $retry_count -eq $max_retries ]; then
                  echo "❌ Failed to create PR after $max_retries attempts: $pr_result"
                fi
              fi
            done
            
            # Small delay between PRs to be respectful of API
            sleep 2
          done
          
          echo "🎉 Batch complete! Generated $batch_size PRs in matrix job ${{ matrix.batch }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 🤖 Maximum PR Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: Generate Maximum PRs" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "**Configuration** (Scheduled):" >> $GITHUB_STEP_SUMMARY
            echo "- Batch Size: 5 PRs per matrix job" >> $GITHUB_STEP_SUMMARY
            echo "- Total PRs: ~25 (5 matrix jobs × 5 PRs)" >> $GITHUB_STEP_SUMMARY
            echo "- File Type: txt" >> $GITHUB_STEP_SUMMARY
            echo "- Content Length: medium" >> $GITHUB_STEP_SUMMARY
          else
            batch_size="${{ github.event.inputs.batch_size }}"
            total_prs=$((batch_size * 5))
            echo "**Configuration** (Manual):" >> $GITHUB_STEP_SUMMARY
            echo "- Batch Size: $batch_size PRs per matrix job" >> $GITHUB_STEP_SUMMARY
            echo "- Total PRs: ~$total_prs (5 matrix jobs × $batch_size PRs)" >> $GITHUB_STEP_SUMMARY
            echo "- File Type: txt" >> $GITHUB_STEP_SUMMARY
            echo "- Content Length: medium" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Matrix Jobs**: 5 parallel jobs for maximum throughput" >> $GITHUB_STEP_SUMMARY
          echo "**API Safety**: Rate limiting and exponential backoff implemented" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the individual job logs for detailed PR creation status. 🚀" >> $GITHUB_STEP_SUMMARY
